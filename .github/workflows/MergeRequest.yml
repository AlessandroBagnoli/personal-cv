name: Merge Request
on:
  pull_request:
    branches:
      - main
      - main-eng

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OWNER: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }}

jobs:
  build_n_test:
    name: Build and check tag
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Tag check
        run: |
          export ORIGINAL_CODE_TAG=$(echo -n | cat version) && echo "Code tag is: $ORIGINAL_CODE_TAG"
          [[ $ORIGINAL_CODE_TAG =~ ^[0-9]+.[0-9]+.[0-9]+$ ]] || (echo $'unsuitable tag for deployment: regex \'^[0-9]+.[0-9]+.[0-9]+$\' was not respected'; exit 99)
          export ORIGINAL_LANGUAGE=$(echo -n | cat language) && echo "Language is: $ORIGINAL_LANGUAGE"
          [[ $ORIGINAL_LANGUAGE =~ ^[a-zA-Z]{3,}+$ ]] || (echo $'unsuitable language for deployment: regex \'^[a-zA-Z]{3,}+$\' was not respected'; exit 99)
          export LANGUAGE_CODE_THREE=$(echo -n ${ORIGINAL_LANGUAGE:0:3} | tr '[a-z]' '[A-Z]') && echo "Language code 3 digits is: $LANGUAGE_CODE_THREE"
          export LANGUAGE_CODE_TWO=$(echo -n ${ORIGINAL_LANGUAGE:0:2} | tr '[a-z]' '[A-Z]') && echo "Language code 2 digits is: $LANGUAGE_CODE_TWO"
          export CODE_TAG="v${ORIGINAL_CODE_TAG}-${LANGUAGE_CODE_THREE}"
          echo "CODE_TAG=$CODE_TAG" >> $GITHUB_ENV
          echo "PRESERVE_TAG=false" >> $GITHUB_ENV
          git fetch --unshallow origin
          git tag | grep "$CODE_TAG" && export CODE_TAG_EXISTS=true && echo "ERROR: THIS TAG ALREADY EXISTS WITHIN THE REPO! EXITING" && sed -i 's/PRESERVE_TAG=false/PRESERVE_TAG=true/g' $GITHUB_ENV  && exit 99
          echo " ==> TAGS: Checks ok!"
          echo " ==> TAGS: Tag is $CODE_TAG" && [[ $CODE_TAG_EXISTS != "true" ]] && git tag $CODE_TAG && git push --tags
          echo "ORIGINAL_CODE_TAG=$ORIGINAL_CODE_TAG" >> $GITHUB_ENV
          echo "ORIGINAL_LANGUAGE=$ORIGINAL_LANGUAGE" >> $GITHUB_ENV
          echo "LANGUAGE_CODE_TWO=$LANGUAGE_CODE_TWO" >> $GITHUB_ENV

      - name: Build LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: cv.tex
          latexmk_use_xelatex: true
          post_compile: "cp cv.pdf CV_Bagnoli_Alessandro_${{ env.LANGUAGE_CODE_TWO }}.pdf"
          
      - name: Create draft release
        id: create_release
        uses: release-drafter/release-drafter@v5
        with:
          name: ${{ env.ORIGINAL_LANGUAGE }} ${{ env.ORIGINAL_CODE_TAG }} just for testing purpose!!! Will be deleted
          tag: ${{ env.CODE_TAG }}
          commitish: ${{ github.event.pull_request.base.ref }}
          
      - name: Upload Release Asset
        run: |
          gh api \
          --method POST \
          --header 'Accept: application/vnd.github+json' \
          --header 'Content-Type: application/pdf' \
          --input  './CV_Bagnoli_Alessandro_${{ env.LANGUAGE_CODE_TWO }}.pdf' \
          /repos/$OWNER/$REPO/releases/${{ steps.create_release.outputs.id }}/assets?name=CV_Bagnoli_Alessandro_${{ env.LANGUAGE_CODE_TWO }}.pdf

      - name: Deleting tag
        if: ${{ always() }}
        run: |
          [[ "${{ env.PRESERVE_TAG }}" == "false" ]] && git push --delete origin $CODE_TAG
          
      - name: Delete draft release
        if: ${{ always() }}
        run: |
          gh api \
          --method DELETE \
          --header "Accept: application/vnd.github+json" \
          /repos/$OWNER/$REPO/releases/${{ steps.create_release.outputs.id }}
        
      - name: Send Telegram notification on success
        run: |
          ROCKET_EMOJI=$(echo -e '\U0001F680')
          curl --request POST \
          --url    'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --header 'User-Agent: GitHub Action' \
          --data '
          {
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "'$ROCKET_EMOJI' Pull pipeline passed! Merge whenever you are ready to generate your PDF '$ROCKET_EMOJI'"
          }
          '
          
      - name: Send Telegram notification on failure
        if: ${{ failure() }}
        run: |
          WARNING_EMOJI=$(echo -e '\U00026A0')
          curl --request POST \
          --url    'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --header 'User-Agent: GitHub Action' \
          --data '
          {
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "'$WARNING_EMOJI' Pull pipeline failed! '$WARNING_EMOJI'"
          }
          '